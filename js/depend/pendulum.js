// Generated by CoffeeScript 1.6.3
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

(function(exports) {
  var Pendulum;
  Pendulum = (function() {
    function Pendulum(bpm) {
      this.tick = __bind(this.tick, this);
      this.bpm = bpm;
      this.events = {};
      this.interval = null;
      this.running = false;
      return;
    }

    Pendulum.prototype.on = function(event, callback) {
      if (!this.events[event]) {
        this.events[event] = [];
      }
      this.events[event].push(callback);
      return callback;
    };

    Pendulum.prototype.fire = function(event, args) {
      var _i, _len, _ref;
      if (args == null) {
        args = [];
      }
      if (!this.events[event]) {
        this.events[event] = [];
      }
      _ref = this.events[event];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        event = _ref[_i];
        event.apply(this, args);
      }
      return this.events[event];
    };

    Pendulum.prototype.set = function(bpm, update) {
      var old;
      if (update == null) {
        update = true;
      }
      old = this.bpm;
      this.bpm = bpm;
      this.fire('bpm', [old, bpm]);
      if (update && this.running) {
        this.stop();
        this.start();
      }
      return bpm;
    };

    Pendulum.prototype.bpmToMillisecondsInterval = function(bpm) {
      return 1 / (bpm / (60 * 1000));
    };

    Pendulum.prototype.start = function() {
      this.fire('start');
      clearInterval(this.interval);
      this.interval = setInterval(this.tick, this.bpmToMillisecondsInterval(this.bpm));
      this.running = true;
      return this.bpm;
    };

    Pendulum.prototype.stop = function() {
      this.fire('stop');
      clearInterval(this.interval);
      this.running = false;
    };

    Pendulum.prototype.tick = function() {
      this.fire('tick');
    };

    return Pendulum;

  })();
  return exports.Pendulum = Pendulum;
})(typeof exports !== "undefined" && exports !== null ? exports : this);
